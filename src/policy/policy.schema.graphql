type Policy {
    id: Int!
    insuranceCompanyId: Int!
    type: PolicyType!
    issuingType: IssuingType!
    lineOfBusinessId: Int!
    tpaId: Int
    endCustomerId: Int!
    policyNumber: Int
    source: Source!
    paymentPlan: PaymentPlan!
    startDate: DateTime!
    endDate: DateTime!
    insurancePlanType: InsurancePlanType!
    policyFileURL: String
    tobFileURL: String
    policyTotalValue: Float
    accountManagerId: Int!
    transactionLastUpdatedDate: DateTime
    createdAt: DateTime
    updatedAt: DateTime
    lineOfBusiness: LineOfBusiness!
    tpa: TPA
    insuranceCompany: InsuranceCompany
    endCustomer: EndCustomerUnion!
    compareWithLastMonth: String
    payment: [Payment]
    policyPlan: [PolicyPlan!]!
    totalIssuedPlansCount: Int
    totalActiveIssuedPlansCount: Int
    averageClaimSeverity: Float
    averageClaimFrequency: Float
    totalClaimsAmount: Float
    totalTransactionsCount: Int
    policyGraphMonth: [PolicyGraphMonth]

}

union EndCustomerUnion = Member | Company

type ServiceType {
  amount: Float!
  count: Int!
  percentage: Float!
}

type Service {
    inPatient: ServiceType!
    outPatient: ServiceType!
}

type ProviderTypeData {
  name: String!
  amount: Float!
  count: Int!
  percentage: Float!
}

type ProviderType {
    providerType: [ProviderTypeData!]!
    totalCount: Int!
}

type ProviderData {
  name: String!
  amount: Float!
  count: Int!
  percentage: Float!
}

type Provider {
    provider: [ProviderData!]!
    totalCount: Int!
}

type SubCompanyType {
  name: String!
  city: String
  amount: Float!
  count: Int!
  percentage: Float!
}

type SubCompany {
  subCompany: [SubCompanyType!]!
  totalCount: Int!
}

type PolicyGraphMonth {
  month: String
  value: Float
}

type MemberType {
  member: [Member!]!
  totalCount: Int!
}

type PolicyPlanType {
  policyPlan: [PolicyPlan]
  totalCount: Int!
}

enum PaymentPlan {
    ANNUAL       
    SEMI_ANNUAL  
    QUARTERLY    
    MONTHLY      
}
enum Source {
    SALES_PERSON    
    MARKETING_LEAD  
    EXTERNAL_BROKER 
}
enum PolicyType {
    INDIVIDUAL 
    CORPORATE   
}
enum IssuingType {
    NEW_BUSINESS 
    RENEWAL    
}
enum InsurancePlanType {
    READYMADE
    TAILORED
}

enum PolicyStatus {
    ACTIVE
    INACTIVE
}

enum PolicyUtilizationType {
    CLAIM
    TRANSACTION
}

enum ServiceTypeEnum {
    INPATIENT
    OUTPATIENT
}

input DateRange{
  dateFrom: DateTime
  dateTo: DateTime
}

input PolicyFilterInput {
  status: [PolicyStatus!]!
}

input PolicyUtilizationFilterInput {
  isChronic: [Boolean]
  isValidated: [Boolean]
  isRejected: [Boolean]
  byReimbursement: [Boolean]
  serviceType: [ServiceTypeEnum]
  gender: [Gender]
  dateRange: DateRange
}


type Query {
    listAllPolicies (filter: PolicyFilterInput, search:String): [Policy]!
    listPolicyDetailsByPolicyId (policyId: Int!): Policy!
    listAllServicesByPolicyId (policyId: Int!, policyUtilizationType: PolicyUtilizationType!, filter: PolicyUtilizationFilterInput): Service!
    listAllProviderTypesByPolicyId (policyId: Int!, policyUtilizationType: PolicyUtilizationType!, filter: PolicyUtilizationFilterInput): ProviderType!
    listAllProvidersByPolicyId (policyId: Int!, policyUtilizationType: PolicyUtilizationType!, filter: PolicyUtilizationFilterInput, search:String): Provider!
    listAllSubCompaniesByPolicyId (policyId: Int!, policyUtilizationType: PolicyUtilizationType!, filter: PolicyUtilizationFilterInput): SubCompany!
    listAllPolicyUtilizationsByPolicyId (policyId: Int!, policyUtilizationType: PolicyUtilizationType!, filter: PolicyUtilizationFilterInput): Policy!
    listAllMembersByPolicyId (policyId: Int!, policyUtilizationType: PolicyUtilizationType!, filter: PolicyUtilizationFilterInput, search:String): MemberType!
    listAllPolicyPlansByPolicyId (policyId: Int!): [PolicyPlanType]!

}

